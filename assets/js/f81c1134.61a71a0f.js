"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"leetcode-in-neovim","metadata":{"permalink":"/blog/leetcode-in-neovim","source":"@site/blog/2025-04-06-leetcode-in-the-ide/index.md","title":"Solving LeetCode Problems in NeoVim","description":"I recently came across some CLI tools for LeetCode. There are a few, but","date":"2025-04-06T00:00:00.000Z","tags":[],"readingTime":1.615,"hasTruncateMarker":true,"authors":[{"name":"Nik Kauffman","title":"Software Engineer Extraordinaire","url":"https://github.com/sh33pd0gz","page":{"permalink":"/blog/authors/nikolas"},"socials":{"github":"https://github.com/sh33pd0gz","linkedin":"https://www.linkedin.com/in/nik-kauffman/"},"imageURL":"https://github.com/sh33pd0gz.png","key":"nikolas"}],"frontMatter":{"slug":"leetcode-in-neovim","title":"Solving LeetCode Problems in NeoVim","authors":["nikolas"]},"unlisted":false,"nextItem":{"title":"Streaming Blockchain Data in Apache Flink","permalink":"/blog/streaming-blockchain-messages-in-flink"}},"content":"I recently came across some CLI tools for LeetCode. There are a few, but\\nhere is [a link](https://github.com/clearloop/leetcode-cli) to the \\nthe one I\'ve been using. These can be a useful tool in bringing \\nLeetCode problems to your IDE. This gives a few advantages in the\\nData Structures & Algorithms learning process, in my opinion. Some of them\\nbeing:\\n\\n1. Gives the comfort of being in your personalized development environment\\n2. Allows for the use of version control and sharing your solutions (and notes) \\nsomewhere like GitHub.\\n3. Learning new programming languages while developing the tooling for the language to\\ndevelop locally e.g. linting, formatting, running tests, static type-checking, etc.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Picking A Problem and Language Configuration\\n\\nYou can start off any problem before editing code by getting the problem statement\\nby running `leetcode pick <ID>`.\\n\\nIf this is a problem you wish then to solve, get the scaffolded problem LeetCode \\nprovides as a starting point by running `leetcode edit <ID>`.\\n\\nIf you\'ve been solving problems in one language and get bored or want to begin learning\\na new programming language toggle the `lang` variable in the `~/.leetcode/leetcode.toml`\\nfile. That file looks something like this:\\n\\n```toml\\n[code]\\neditor = \\"nvim\\"\\nlang = \\"java\\"\\n\\n[cookies]\\ncsrf = \\"CSRF_TOKEN HERE\\"\\nsession = \\"LEETCODE_SESSION TOKEN GOES HERE\\"\\nsite = \\"leetcode.com\\"\\n\\n[storage]\\ncache = \\"Problems\\"\\ncode = \\"code\\"\\nroot = \\"~/.leetcode\\"\\nscripts = \\"scripts\\"\\n```\\n\\n## Example (in Java)\\n\\nFor this example lets solve an easy one to see this flow in action.\\n\\nI\'ll be using **Length of Last Word (58)** that falls in the category of \\n_Arrays & Strings_. Here is a screenshot of my IDE in action\\n\\n![Leetcode 58 Code](./leetcode_58_code.png)\\n\\nAnd then testing and executing that code in my floating terminal window reveals\\nthe simple test cases run to acceptance and executing against the remote\\nproblem grader shows statistics around time and space complexity of the submitted\\nsolutions.\\n\\n![Leetcode 58 Submission](./leetcode_58_exec.png)\\n\\nHappy learning!"},{"id":"streaming-blockchain-messages-in-flink","metadata":{"permalink":"/blog/streaming-blockchain-messages-in-flink","source":"@site/blog/streaming-blockchain-messages-in-flink/index.md","title":"Streaming Blockchain Data in Apache Flink","description":"From novice to working in FinTech in one blog post.","date":"2025-04-04T21:16:05.569Z","tags":[],"readingTime":0.12,"hasTruncateMarker":true,"authors":[{"name":"Nik Kauffman","title":"Software Engineer Extraordinaire","url":"https://github.com/sh33pd0gz","page":{"permalink":"/blog/authors/nikolas"},"socials":{"github":"https://github.com/sh33pd0gz","linkedin":"https://www.linkedin.com/in/nik-kauffman/"},"imageURL":"https://github.com/sh33pd0gz.png","key":"nikolas"}],"frontMatter":{"slug":"streaming-blockchain-messages-in-flink","title":"Streaming Blockchain Data in Apache Flink","authors":["nikolas"]},"unlisted":false,"prevItem":{"title":"Solving LeetCode Problems in NeoVim","permalink":"/blog/leetcode-in-neovim"},"nextItem":{"title":"Exploring Distributed Systems With the Kubernetes Operator Pattern","permalink":"/blog/kubernetes-operator-pattern-big-data"}},"content":"From novice to working in FinTech in one blog post.\\n\\n\x3c!-- truncate --\x3e\\n\\nNot really! But, a fun investigation nonetheless.\\n\\n...THE REST BEFORE 4.7"},{"id":"kubernetes-operator-pattern-big-data","metadata":{"permalink":"/blog/kubernetes-operator-pattern-big-data","source":"@site/blog/kubernetes-operator-pattern-big-data/index.md","title":"Exploring Distributed Systems With the Kubernetes Operator Pattern","description":"The Kubernetes Operator pattern provides a few things:","date":"2025-04-04T20:22:09.442Z","tags":[],"readingTime":0.775,"hasTruncateMarker":false,"authors":[{"name":"Nik Kauffman","title":"Software Engineer Extraordinaire","url":"https://github.com/sh33pd0gz","page":{"permalink":"/blog/authors/nikolas"},"socials":{"github":"https://github.com/sh33pd0gz","linkedin":"https://www.linkedin.com/in/nik-kauffman/"},"imageURL":"https://github.com/sh33pd0gz.png","key":"nikolas"}],"frontMatter":{"slug":"kubernetes-operator-pattern-big-data","title":"Exploring Distributed Systems With the Kubernetes Operator Pattern","authors":["nikolas"]},"unlisted":false,"prevItem":{"title":"Streaming Blockchain Data in Apache Flink","permalink":"/blog/streaming-blockchain-messages-in-flink"},"nextItem":{"title":"Integrating AI Tooling in NeoVim","permalink":"/blog/ai-in-neovim"}},"content":"The Kubernetes Operator pattern provides a few things:\\n\\n1. Ease of local development and service orchestration using the same manifests\\nthe production uses (with different parametrization) as Kubernetes\\nenvironments are provided locally via Docker Desktop, Rancher Desktop,\\nor tools like `minikube`. Gone are the days of needing a `docker-compose` file \\nfor integration testing.\\n\\n2. Versatility if deploying across cloud providers is necessary. The Kubernetes\\nOperator pattern is a great way to achieve cloud agnosticsm with your tech\\nstack; all you need is Kubernetes cluster!\\n\\n3. This is more a point to the prowess of containerization and virtualization in\\na more general sense, but this pattern can make the accessibility of tools that\\nused to be considered _difficult to setup and administer_ perceivable as _easy to\\nbootstrap and experiment with_ i.e. distributed systems frameworks available from\\nthe Apache Foundation.\\n\\n## Ultimate Configuration and Bootstrappig\\n\\n1. Skaffold and Kustomize\\n2. Example with Kafka\\n3. Example with Flink"},{"id":"ai-in-neovim","metadata":{"permalink":"/blog/ai-in-neovim","source":"@site/blog/ai-in-neovim/index.md","title":"Integrating AI Tooling in NeoVim","description":"COMING SOON","date":"2025-04-04T20:12:02.069Z","tags":[],"readingTime":0.01,"hasTruncateMarker":false,"authors":[{"name":"Nik Kauffman","title":"Software Engineer Extraordinaire","url":"https://github.com/sh33pd0gz","page":{"permalink":"/blog/authors/nikolas"},"socials":{"github":"https://github.com/sh33pd0gz","linkedin":"https://www.linkedin.com/in/nik-kauffman/"},"imageURL":"https://github.com/sh33pd0gz.png","key":"nikolas"}],"frontMatter":{"slug":"ai-in-neovim","title":"Integrating AI Tooling in NeoVim","authors":["nikolas"]},"unlisted":false,"prevItem":{"title":"Exploring Distributed Systems With the Kubernetes Operator Pattern","permalink":"/blog/kubernetes-operator-pattern-big-data"}},"content":"COMING SOON"}]}}')}}]);