<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sh33pd0gz.github.io/blog</id>
    <title>my portfolio Blog</title>
    <updated>2025-04-06T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sh33pd0gz.github.io/blog"/>
    <subtitle>my portfolio Blog</subtitle>
    <icon>https://sh33pd0gz.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Solving LeetCode Problems in NeoVim]]></title>
        <id>https://sh33pd0gz.github.io/blog/leetcode-in-neovim</id>
        <link href="https://sh33pd0gz.github.io/blog/leetcode-in-neovim"/>
        <updated>2025-04-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I recently came across some CLI tools for LeetCode. There are a few, but]]></summary>
        <content type="html"><![CDATA[<p>I recently came across some CLI tools for LeetCode. There are a few, but
here is <a href="https://github.com/clearloop/leetcode-cli" target="_blank" rel="noopener noreferrer">a link</a> to the
the one I've been using. These can be a useful tool in bringing
LeetCode problems to your IDE. This gives a few advantages in the
Data Structures &amp; Algorithms learning process, in my opinion. Some of them
being:</p>
<ol>
<li>Gives the comfort of being in your personalized development environment</li>
<li>Allows for the use of version control and sharing your solutions (and notes)
somewhere like GitHub.</li>
<li>Learning new programming languages while developing the tooling for the language to
develop locally e.g. linting, formatting, running tests, static type-checking, etc.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="picking-a-problem-and-language-configuration">Picking A Problem and Language Configuration<a href="https://sh33pd0gz.github.io/blog/leetcode-in-neovim#picking-a-problem-and-language-configuration" class="hash-link" aria-label="Direct link to Picking A Problem and Language Configuration" title="Direct link to Picking A Problem and Language Configuration">​</a></h2>
<p>You can start off any problem before editing code by getting the problem statement
by running <code>leetcode pick &lt;ID&gt;</code>.</p>
<p>If this is a problem you wish then to solve, get the scaffolded problem LeetCode
provides as a starting point by running <code>leetcode edit &lt;ID&gt;</code>.</p>
<p>If you've been solving problems in one language and get bored or want to begin learning
a new programming language toggle the <code>lang</code> variable in the <code>~/.leetcode/leetcode.toml</code>
file. That file looks something like this:</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[code]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">editor = "nvim"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lang = "java"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[cookies]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">csrf = "CSRF_TOKEN HERE"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">session = "LEETCODE_SESSION TOKEN GOES HERE"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">site = "leetcode.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[storage]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cache = "Problems"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">code = "code"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root = "~/.leetcode"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">scripts = "scripts"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="example-in-java">Example (in Java)<a href="https://sh33pd0gz.github.io/blog/leetcode-in-neovim#example-in-java" class="hash-link" aria-label="Direct link to Example (in Java)" title="Direct link to Example (in Java)">​</a></h2>
<p>For this example lets solve an easy one to see this flow in action.</p>
<p>I'll be using <strong>Length of Last Word (58)</strong> that falls in the category of
<em>Arrays &amp; Strings</em>. Here is a screenshot of my IDE in action</p>
<p><img decoding="async" loading="lazy" alt="Leetcode 58 Code" src="https://sh33pd0gz.github.io/assets/images/leetcode_58_code-49dbe381de130895667d674c26d3d3db.png" width="1856" height="1022" class="img_ev3q"></p>
<p>And then testing and executing that code in my floating terminal window reveals
the simple test cases run to acceptance and executing against the remote
problem grader shows statistics around time and space complexity of the submitted
solutions.</p>
<p><img decoding="async" loading="lazy" alt="Leetcode 58 Submission" src="https://sh33pd0gz.github.io/assets/images/leetcode_58_exec-99a0a9f066c6a0f29dc0af523c5ed4b1.png" width="3498" height="1952" class="img_ev3q"></p>
<p>Happy learning!</p>]]></content>
        <author>
            <name>Nik Kauffman</name>
            <uri>https://github.com/sh33pd0gz</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streaming Blockchain Data in Apache Flink]]></title>
        <id>https://sh33pd0gz.github.io/blog/streaming-blockchain-messages-in-flink</id>
        <link href="https://sh33pd0gz.github.io/blog/streaming-blockchain-messages-in-flink"/>
        <updated>2025-04-04T21:16:05.569Z</updated>
        <summary type="html"><![CDATA[From novice to working in FinTech in one blog post.]]></summary>
        <content type="html"><![CDATA[<p>From novice to working in FinTech in one blog post.</p>
<p>Not really! But, a fun investigation nonetheless.</p>
<p>...THE REST BEFORE 4.7</p>]]></content>
        <author>
            <name>Nik Kauffman</name>
            <uri>https://github.com/sh33pd0gz</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Exploring Distributed Systems With the Kubernetes Operator Pattern]]></title>
        <id>https://sh33pd0gz.github.io/blog/kubernetes-operator-pattern-big-data</id>
        <link href="https://sh33pd0gz.github.io/blog/kubernetes-operator-pattern-big-data"/>
        <updated>2025-04-04T20:22:09.442Z</updated>
        <summary type="html"><![CDATA[The Kubernetes Operator pattern provides a few things:]]></summary>
        <content type="html"><![CDATA[<p>The Kubernetes Operator pattern provides a few things:</p>
<ol>
<li>
<p>Ease of local development and service orchestration using the same manifests
the production uses (with different parametrization) as Kubernetes
environments are provided locally via Docker Desktop, Rancher Desktop,
or tools like <code>minikube</code>. Gone are the days of needing a <code>docker-compose</code> file
for integration testing.</p>
</li>
<li>
<p>Versatility if deploying across cloud providers is necessary. The Kubernetes
Operator pattern is a great way to achieve cloud agnosticsm with your tech
stack; all you need is Kubernetes cluster!</p>
</li>
<li>
<p>This is more a point to the prowess of containerization and virtualization in
a more general sense, but this pattern can make the accessibility of tools that
used to be considered <em>difficult to setup and administer</em> perceivable as <em>easy to
bootstrap and experiment with</em> i.e. distributed systems frameworks available from
the Apache Foundation.</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ultimate-configuration-and-bootstrappig">Ultimate Configuration and Bootstrappig<a href="https://sh33pd0gz.github.io/blog/kubernetes-operator-pattern-big-data#ultimate-configuration-and-bootstrappig" class="hash-link" aria-label="Direct link to Ultimate Configuration and Bootstrappig" title="Direct link to Ultimate Configuration and Bootstrappig">​</a></h2>
<ol>
<li>Skaffold and Kustomize</li>
<li>Example with Kafka</li>
<li>Example with Flink</li>
</ol>]]></content>
        <author>
            <name>Nik Kauffman</name>
            <uri>https://github.com/sh33pd0gz</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Integrating AI Tooling in NeoVim]]></title>
        <id>https://sh33pd0gz.github.io/blog/ai-in-neovim</id>
        <link href="https://sh33pd0gz.github.io/blog/ai-in-neovim"/>
        <updated>2025-04-04T20:12:02.069Z</updated>
        <summary type="html"><![CDATA[COMING SOON]]></summary>
        <content type="html"><![CDATA[<p>COMING SOON</p>]]></content>
        <author>
            <name>Nik Kauffman</name>
            <uri>https://github.com/sh33pd0gz</uri>
        </author>
    </entry>
</feed>